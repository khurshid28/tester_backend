// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Category {
  id          Int           @id @default(autoincrement())
  name        String?
  subcategories SubCategory[]
  createdAt DateTime  @default(now())


  userId        Int?
  user          User?          @relation(fields: [userId], references: [id])

}

model SubCategory {
  id          Int           @id @default(autoincrement())
  name        String?
  categoryId  Int?
  category    Category?      @relation(fields: [categoryId], references: [id],onDelete: Cascade)
  tests       Test[]
  testGroups   TestGroup[] 
  createdAt DateTime  @default(now())


   userId        Int?
  user          User?          @relation(fields: [userId], references: [id])

}
model TestGroup {
  id           Int           @id @default(autoincrement())
  name         String?
  subCategoryId Int?         // Many-to-one relation to SubCategory
  subCategory  SubCategory?  @relation(fields: [subCategoryId], references: [id],onDelete: Cascade)
  tests        Test[]        // One-to-many relation with Test
  createdAt    DateTime      @default(now())

  userId       Int?
  user         User?         @relation(fields: [userId], references: [id])
}


model Test {
  id          Int           @id @default(autoincrement())
  question    String? @db.VarChar(255)
  answer      String? @db.VarChar(255)
  subCategoryId Int?
  subCategory SubCategory?   @relation(fields: [subCategoryId], references: [id],onDelete: Cascade)
  createdAt DateTime  @default(now())

  testGroupId  Int?          // Many-to-one relation to TestGroup
  testGroup    TestGroup?    @relation(fields: [testGroupId], references: [id])


  userId        Int?
  user          User?          @relation(fields: [userId], references: [id])

}



model User {
  id        Int      @id @default(autoincrement()) 
  login     String    @unique
  password  String
  name      String?
  createdAt DateTime @default(now())


  categories Category[]
  subcategories SubCategory[]
  tests     Test[]
  testGroups   TestGroup[] 
}
